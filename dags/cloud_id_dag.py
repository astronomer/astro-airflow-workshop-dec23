"""
air_quality_dag
DAG auto-generated by Astro Cloud IDE.
"""

from airflow.decorators import dag
from astro import sql as aql
from astro.table import Table, Metadata
import pandas as pd
import pendulum

import requests
import pandas as pd

@aql.dataframe(task_id="get_ozone_tomorrow")
def get_ozone_tomorrow_func():
    longitude = -76.6122
    latitude = 39.2904
    
    r = requests.get(f"https://air-quality-api.open-meteo.com/v1/air-quality?latitude={latitude}&longitude={longitude}&hourly=ozone&forecast_days=1")
    
    return r.json()

@aql.dataframe(task_id="transform_ozone")
def transform_ozone_func(get_ozone_tomorrow: pd.DataFrame):
    data = get_ozone_tomorrow
    
    df_hourly = pd.DataFrame(data["hourly"])
    
    return df_hourly

@aql.run_raw_sql(conn_id="duckdb_default", task_id="load_ozone", results_format="pandas_dataframe")
def load_ozone_func(transform_ozone: Table):
    return """
    SELECT * FROM {{transform_ozone}};
    """

@aql.run_raw_sql(conn_id="duckdb_default", task_id="get_max_ozone_tomorrow", results_format="pandas_dataframe")
def get_max_ozone_tomorrow_func(load_ozone: Table):
    return """
    SELECT max(ozone) FROM {{load_ozone}};
    """

default_args={
    "owner": "Open in Cloud IDE",
}

@dag(
    default_args=default_args,
    schedule="0 0 * * *",
    start_date=pendulum.from_format("2024-06-13", "YYYY-MM-DD").in_tz("UTC"),
    catchup=False,
    owner_links={
        "Open in Cloud IDE": "https://cloud.astronomer.io/clvmrcvvj0cja01md1r8sb6xq/cloud-ide/clxd94ynv0bsh01mlok90u3ye/clxd957340boc01o2hfjd3auc",
    },
)
def air_quality_dag():
    get_ozone_tomorrow = get_ozone_tomorrow_func()

    transform_ozone = transform_ozone_func(
        get_ozone_tomorrow,
    )

    load_ozone = load_ozone_func(
        transform_ozone,
    )

    get_max_ozone_tomorrow = get_max_ozone_tomorrow_func(
        load_ozone,
    )

dag_obj = air_quality_dag()
